(require 'url)

(defun percona-get-top-dir () "~/percona/repo")
(defun parse-launchpad-path-get-ticket-project (path)
       (cond ((string= "percona-xtrabackup" (cadr (split-string path "/"))) "xb-")
             (t "ps-")))
(defun parse-launchpad-path-get-ticket-type (path)
       (cond ((string= "+bug" (caddr (split-string path "/"))) "bug")
             (t "blueprint-")))
(defun parse-launchpad-path-get-ticket-id (path)
       (file-name-base path))
(defun parse-launchpad-url-to-project-name (url)
       (let ((path (url-filename (url-generic-parse-url url))))
            (concat (parse-launchpad-path-get-ticket-project path)
                    (parse-launchpad-path-get-ticket-type path)
                    (parse-launchpad-path-get-ticket-id path))))
(defun run-it (command)
       (async-shell-command command "*checkout*")
       (pop-to-buffer "*checkout*")
       (buffer-disable-undo))
(defun parse-issue-path-get-id (path)
       (cadr (split-string path "=")))
(defun parse-issue-url-to-project-prefix (url)
       (let ((issue-type-prefix
              (if (member "bt" (org-get-tags-at nil)) "BT" "ST"))
             (path (url-filename (url-generic-parse-url url))))
             (concat issue-type-prefix (parse-issue-path-get-id path) "-")))
(defun percona-setup-xtrabackup ()
       (let ((project-root
              (concat (parse-issue-url-to-project-prefix (org-entry-get nil "issue"))
                      (parse-launchpad-url-to-project-name (org-entry-get nil "URL"))))
             (top-dir (percona-get-top-dir)))
             (org-entry-put nil "project-root" project-root)
             (run-it (concat top-dir "/percona_create_branches_wrapper.sh xb " project-root))))
(defun percona-setup-server ()
       (let ((project-root (parse-launchpad-url-to-project-name (org-entry-get nil "URL")))
             (top-dir (percona-get-top-dir)))
             (org-entry-put nil "project-root" project-root)
             (run-it (concat top-dir "/percona_create_branches_wrapper.sh server " project-root))))
(defun percona-setup-project ()
       "setup project associated with current heading"
       (interactive)
       (cond ((member "xb" (org-get-tags-at nil)) (percona-setup-xtrabackup))
             ((member "ps" (org-get-tags-at nil)) (percona-setup-server))))
(defun percona-goto-project ()
       "reveal project associated with current heading in iTerm2"
       (interactive)
       (let ((project-root (org-entry-get nil "project-root"))
             (top-dir (percona-get-top-dir)))
             (shell-command (concat (file-name-as-directory top-dir) "reveal_terminal_at.sh " project-root))))

(provide 'percona)
